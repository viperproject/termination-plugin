//:: IgnoreFile(/silicon/issue/000/)

import <decreases/pred_decreases.sil>

function f1(r:Ref): Int
requires p1(r)
ensures decreases(p1(r))
{
    unfolding p1(r) in (r.next == null ? 2 : (unfolding q1(r.next) in f1(r.next)))
}

predicate p1(r:Ref) {
    acc(r.next) && acc(q1(r.next)) && (r.next != null ==> p1(r.next))
}

predicate q1(r:Ref) {
    acc(r.next) && (r.next != null ==> q1(r.next))
}

field next:Ref

function f2(i: Int, s: Seq[Int]): Int
requires p2(i)
requires q2(s)
ensures decreases(p2(i), q2(s))
{
    i > 2 && |s|>2? (unfolding p2(i) in unfolding q2(s) in unfolding p2(i-1) in unfolding q2(s[1..]) in f2(i-1-1, s[1..][1..])) : 7
}

predicate p2(i: Int)
{
    i > 1 ? p2(i-1) : true
}


predicate q2(s: Seq[Int])
{
    |s| > 1 ? q2(s[1..]) : true
}