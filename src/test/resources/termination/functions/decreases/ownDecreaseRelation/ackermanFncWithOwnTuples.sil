// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

import <decreases/dec.sil>
import <decreases/int_decreases.sil>

function ack(m:Int, n:Int):Int
requires m >= 0
requires n >= 0
ensures decreases(tuple2Conn(m,n))
{
  m==0 ? n+1 :
    n==0 ?
      ack(m-1,1) :
      ack(m,n-1)
}


function ackTuple(t: Tuple2[Int,Int]):Int
requires first2(t) >= 0
requires second2(t) >= 0
requires second2(t) >= 0
ensures decreases(t)
{
  first2(t)==0 ? second2(t)+1 :
    second2(t)==0 ?
      ackTuple(tuple2Conn(first2(t)-1,1)) :
      ackTuple(tuple2Conn(first2(t),second2(t)-1))
}

domain Tuple2[A,B]{
    function tuple2Conn(a:A, b:B): Tuple2[A,B]

    function first2(t: Tuple2[A,B]): A
    function second2(t: Tuple2[A,B]): B

    axiom conn2{
        forall t: Tuple2[A,B] :: {first2(t)} {second2(t)}
        t == tuple2Conn(first2(t), second2(t))
    }

    axiom deConn2{
        forall a: A, b:B :: {tuple2Conn(a,b)}
        first2(tuple2Conn(a,b)) == a &&
        second2(tuple2Conn(a,b)) == b
    }
}

domain Tuple2TerminationOrder[A,B]{
    //2 Tuples
    axiom tuple_ax_dec2{
         forall t1: Tuple2[A,B], t2: Tuple2[A,B] :: {decreasing(t1,t2)}
         decreasing(first2(t1),first2(t2)) ||
         (first2(t1) == first2(t2) && decreasing(second2(t1),second2(t2)))
         ==> decreasing(t1,t2)
    }
    axiom tuple_ax_bound2{
        forall t1: Tuple2[A,B] ::
        (bounded(first2(t1)) && bounded(second2(t1))) ==> bounded(t1)
    }
}