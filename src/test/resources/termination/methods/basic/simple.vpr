// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

import <decreases/int_decreases.sil>

method m(x: Int) returns (res:Int)
    requires x >= 0
    ensures res == x
    ensures decreases(x)
{
    if (x==0) {
        res := 0
    }else{
        var r: Int
        r := m(x-1)
        res := 1 + r
    }
}

method mutual1(y: Int) returns (res: Int)
    ensures decreases(y)
{
    if (y <= 0) {
        res := 0
    } else {
        res := mutual2(y-1)
    }
}

method mutual2(z: Int) returns (res: Int)
    ensures decreases(z)
{
    if (z <= 0) {
        res := 0
    } else {
        res := mutual1(z-1)
    }
}

method non1(y: Int) returns (res: Int)
    ensures decreases(y)
{
    if (y <= 0) {
        res := 0
    } else {
        //:: ExpectedOutput(termination.failed:termination.no.decrease)
        res := non2(y)
    }
}

method non2(z: Int) returns (res: Int)
    ensures decreases(z)
{
    if (z <= 0) {
        res := 0
    } else {
        //:: ExpectedOutput(termination.failed:termination.no.decrease)
        res := non1(z)
    }
}